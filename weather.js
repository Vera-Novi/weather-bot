// This is a simple Telegram bot that provides weather information
require('dotenv').config(); // Load .env

const TelegramBot = require('node-telegram-bot-api');
const express = require('express');
const axios = require('axios');

const app = express();
const PORT = process.env.PORT || 3000;



const weatherToken = process.env.WEATHER_TOKEN; // Replace with your OpenWeatherMap API key
const token = process.env.BOT_TOKEN; // Replace with your bot token


app.get('/', (req, res) => {
  res.send('–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!');
});

app.listen(PORT, () => {
  console.log(`üöÄ Express server is running on port ${PORT}`);
});
// Create a new Telegram bot instance

const bot = new TelegramBot(token, { polling: true });
console.log('–ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞...');

bot.onText(/\/start/, (msg) => {
  bot.sendMessage(
    msg.chat.id,
    '–ü—Ä–∏–≤–µ—Ç! –ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞, –∏ —è –ø—Ä–∏—à–ª—é –ø—Ä–æ–≥–Ω–æ–∑  –ø–æ–≥–æ–¥—ã'
  );
});


function getWeatherEmoji(condition) {
  const lower = condition.toLowerCase();
  if (lower.includes('rain')) return 'üåßÔ∏è';
  if (lower.includes('clear')) return '‚òÄÔ∏è';
  if (lower.includes('sun')) return '‚òÄÔ∏è';
  if (lower.includes('cloud')) return '‚òÅÔ∏è';
  if (lower.includes('snow')) return '‚ùÑÔ∏è';
  if (lower.includes('thunderstorm')) return '‚õàÔ∏è';
  if (lower.includes('fog')) return 'üå´Ô∏è';
  if (lower.includes('wind')) return 'üí®';
  if (lower.includes('mist')) return 'üå´Ô∏è';
  if (lower.includes('haze')) return 'üå´Ô∏è'
  if (lower.includes('dust')) return 'üå™Ô∏è';
  if (lower.includes('smoke')) return 'üå´Ô∏è';
  if (lower.includes('sand')) return 'üå™Ô∏è';
  if (lower.includes('tornado')) return 'üå™Ô∏è';
  if (lower.includes('squall')) return 'üå™Ô∏è';
  if (lower.includes('ash')) return 'üåã';
  if (lower.includes('sleet')) return 'üåßÔ∏è';
  if (lower.includes('hail')) return 'üå®Ô∏è';
  if (lower.includes('hot')) return 'üî•';
  if (lower.includes('cold')) return '‚ùÑÔ∏è';
  if (lower.includes('storm')) return '‚õàÔ∏è';
  if (lower.includes('partly cloudy')) return 'üå§Ô∏è';
  if (lower.includes('overcast')) return '‚òÅÔ∏è';
  if (lower.includes('mostly cloudy')) return '‚òÅÔ∏è';
  if (lower.includes('mostly sunny')) return 'üå§Ô∏è';
  if (lower.includes('partly sunny')) return 'üå§Ô∏è';
  if (lower.includes('light rain')) return 'üå¶Ô∏è';
  if (lower.includes('light snow')) return 'üå®Ô∏è';


}

bot.on('message', async (msg) => {
  const chatId = msg.chat.id;
  const city = msg.text;

  if (city.toLowerCase() === '/start') return;

  try {
    const url = `http://api.weatherapi.com/v1/current.json?key=${weatherToken}&q=${encodeURIComponent(
      city
    )}&lang=ru`;
    const response = await axios.get(url);
    const data = response.data;

    const weather = data.current.condition.text;
    const temp = data.current.temp_c;
    const feelsLike = data.current.feelslike_c;
    const wind = data.current.wind_kph;
    const humidity = data.current.humidity;
    const pressure = data.current.pressure_mb;
    const icon = data.current.condition.icon;
    const iconUrl = `http:${icon}`;
    const windDirection = data.current.wind_dir;

    const message = `
    üåç *${data.location.name}, ${data.location.country}*
${emoji} *${condition}*
    –ü–æ–≥–æ–¥–∞ –≤ –≥–æ—Ä–æ–¥–µ *${data.location.name}*:
- ${weather}
- üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: ${temp}¬∞C
- ü§ó –û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫: ${feelsLike}¬∞C
üí® –í–µ—Ç–µ—Ä: *${wind} –∫–º/—á*
- üå¨ –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–µ—Ç—Ä–∞: *${windDirection}*
üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: *${humidity}%*
`;

    bot.sendMessage(chatId, message, { parse_mode: 'Markdown' });
  } catch (error) {
    console.error(error.response?.data || error.message);
    bot.sendMessage(
      chatId,
      '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–≥–æ–¥—É. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≥–æ—Ä–æ–¥ —É–∫–∞–∑–∞–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ.'
    );
  }
});
